#include "stdafx.h"
#include "Player.h"

#define _USE_MATH_DEFINES
#include <math.h>

Player::Player(sf::RenderWindow& window, float size, unsigned max_health)
	: m_window(window), m_health(max_health), m_cirle_shape(size, 3), m_bounding_circle(size * 0.7f, 16)
{
	m_cirle_shape.setOrigin(m_cirle_shape.getRadius(), m_cirle_shape.getRadius());
	m_bounding_circle.setOrigin(m_bounding_circle.getRadius(), m_bounding_circle.getRadius());

	m_bounding_circle.setFillColor(sf::Color::Transparent);
	m_cirle_shape.setFillColor(sf::Color::Transparent);

	m_cirle_shape.setOutlineThickness(2.f);
	m_cirle_shape.setOutlineColor(sf::Color::Red);

	m_bounding_circle.setOutlineThickness(2.f);
	m_bounding_circle.setOutlineColor(sf::Color::Green);
}

void Player::handleInput(sf::Event& event)
{
	if (sf::Keyboard::isKeyPressed(sf::Keyboard::W))
		movement_vector.y += -1.f;
	if (sf::Keyboard::isKeyPressed(sf::Keyboard::S))
		movement_vector.y += 1.f;
	if (!sf::Keyboard::isKeyPressed(sf::Keyboard::W) && !sf::Keyboard::isKeyPressed(sf::Keyboard::S))
		movement_vector.y = 0.f;

	if (sf::Keyboard::isKeyPressed(sf::Keyboard::A))
		movement_vector.x += -1.f;
	if (sf::Keyboard::isKeyPressed(sf::Keyboard::D))
		movement_vector.x += 1.f;
	if (!sf::Keyboard::isKeyPressed(sf::Keyboard::A) && !sf::Keyboard::isKeyPressed(sf::Keyboard::D))
		movement_vector.x = 0.f;
}

void Player::update(float dt)
{
	// Move Player
	sf::Vector2f move_dir = movement_vector * move_speed * dt;
	// Normalize
	sf::Vector2f normalized = move_dir;
	set_position(get_position() + normalized);
	std::cout << movement_vector.x << " " << movement_vector.y << std::endl;

	// Rotate to look at mouse position
	sf::Vector2i mouse_pos = sf::Mouse::getPosition(m_window);
	sf::Vector2f player_pos = get_position();
	sf::Vector2f D = player_pos - sf::Vector2f(mouse_pos.x, mouse_pos.y);

	float radians = atan2f(D.y, D.x);

	m_cirle_shape.setRotation(radians * 180 / M_PI);
	m_cirle_shape.rotate(30.f);
}

void Player::render(sf::RenderWindow& window)
{
	window.draw(m_cirle_shape);
	window.draw(m_bounding_circle);
}

void Player::set_texture(sf::Texture& texture)
{
}

void Player::set_position(sf::Vector2f position)
{
	m_cirle_shape.setPosition(position);
	m_bounding_circle.setPosition(position);
}

const sf::Vector2f Player::get_position() const
{
	return m_cirle_shape.getPosition();
}

void Player::scale(float scalar)
{
}
